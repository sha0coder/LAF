diff --git a/Makefile b/Makefile
index e823ae1..93ce5a1 100644
--- a/Makefile
+++ b/Makefile
@@ -1,11 +1,13 @@
 obj-m := laf.o
 
 all:
-	#rmmod laf
 	make -C /lib/modules/$(shell uname -r)/build M=$(PWD) modules -Wunused-function -Werror=strict-prototypes
-	insmod laf.ko
 
-clean:
-	make -C /lib/modules/$(shell uname -r)/build M=$(PWD) clean
+uninstall:
+	sudo rmmod laf
 
+install:
+	sudo insmod laf.ko
 
+clean:
+	make -C /lib/modules/$(shell uname -r)/build M=$(PWD) clean
diff --git a/laf.c b/laf.c
index be62bcc..19ead3f 100644
--- a/laf.c
+++ b/laf.c
@@ -2,9 +2,11 @@
 	LAF - Linux Application Firewall  (for linux 64bits)
 	This firewall allows only communications made from allowed processes
 
-	The detection and block is performed over the socket, AF_UNIX are allowed allways, 
-	If other kind of socket is created (AF_INET,AF_INET6,...) if the processname is not in the whitelist
-	the socket creation is canceled.
+	The detection and block is performed over the socket, AF_UNIX are allowed
+	allways. 
+
+	If other kind of socket is created (AF_INET,AF_INET6,...) if the
+	processname is not in the whitelist the socket creation is canceled.
 
 	by @sha0coder
 */
@@ -17,6 +19,7 @@
 #include <linux/sched.h> 	// current struct
 #include <linux/in.h>		// sockaddr_in
 #include <linux/socket.h>
+#include <linux/syscalls.h>
 
 #include "whitelist.h"
 
@@ -27,11 +30,28 @@
 #define BLOCKED				-1
 #define MAX_WHITELIST		255
 
-
-asmlinkage long (*old_socketcall) (int call, unsigned long __user *args);
-asmlinkage int (*old_connect) (int sockfd, const struct sockaddr *addr, long addrlen);
+//asmlinkage long (*old_socketcall) (int call, unsigned long __user *args);
+//asmlinkage int (*old_connect) (int sockfd, const struct sockaddr *addr, long addrlen);
 asmlinkage int (*old_socket) (int domain, int type, int protocol);
 
+unsigned long **st;
+
+static unsigned long **aquire_sys_call_table(void)
+{
+	unsigned long int offset = PAGE_OFFSET;
+	unsigned long **sct;
+
+	while (offset < ULLONG_MAX) {
+		sct = (unsigned long **)offset;
+
+		if (sct[__NR_close] == (unsigned long *) sys_close) 
+			return sct;
+
+		offset += sizeof(void *);
+	}
+	
+	return NULL;
+}
 
 int isWhitelistedSimilar(void) {
 	int i;
@@ -92,14 +112,13 @@ asmlinkage int new_socket(int domain, int type, int protocol) {
 	return old_socket(domain,type,protocol);
 }
 
-
 /*
 asmlinkage int new_connect(int sockfd, const struct sockaddr *addr, long addrlen) {
 	if (((struct sockaddr_in *)addr)->sin_family == AF_INET6)
 		return -1;
 	
 	if (((struct sockaddr_in *)addr)->sin_family == AF_INET) {
-		if (!isWhitelisted()) {
+		if (!isWhitelistedExact()) {
 			if (LOG)
 				printk(KERN_INFO "LAF blocked %s\n",current->comm);
 			return -1;
@@ -122,7 +141,7 @@ asmlinkage long new_socketcall(int call, unsigned long __user *args) {
 			
 			printk(KERN_INFO "fam:%d proc:%s\n",((struct sockaddr_in *)args[1])->sin_family,current->comm);
 			if (((struct sockaddr_in *)args[1])->sin_family != 1)
-				if (!isWhitelisted())
+				if (!isWhitelistedExact())
 					return BLOCKED;
 			
 			break;
@@ -134,7 +153,7 @@ asmlinkage long new_socketcall(int call, unsigned long __user *args) {
 			
 			printk(KERN_INFO "fam:%d proc:%s\n",((struct sockaddr_in *)args[1])->sin_family,current->comm);
 			if (((struct sockaddr_in *)args[4])->sin_family != 1)
-				if (!isWhitelisted())
+				if (!isWhitelistedExact())
 					return BLOCKED;
 			break;
 
@@ -161,7 +180,8 @@ asmlinkage long new_socketcall(int call, unsigned long __user *args) {
 	}
 
 	return old_socketcall(call,args);
-}*/
+}
+*/
 
 void unHook(void) {
 	disable_page_protection();
@@ -178,6 +198,8 @@ void hook(void) {
 
 
 static int __init load(void) {
+	/* load the syscall table addr in st */
+	st = aquire_sys_call_table();
 	hook();
 	printk(KERN_INFO "LAF Enabled\n");
 	return 0;
diff --git a/whitelist.h b/whitelist.h
index a13274e..caf8601 100644
--- a/whitelist.h
+++ b/whitelist.h
@@ -1,13 +1,11 @@
-
-
 // put here your syscall table address  (grep sys_call_table /proc/kallsyms)
-unsigned long **st = (unsigned long **)0xffffffff81801400;
-
+//unsigned long **st = (unsigned long **)0xffffffff81801400;
 
-#define LOG 1 // 0 -> don't log blocks   1 -> log blocks
+// LOG 0 -> don't log blocks | LOG 1 -> log blocks
+#define LOG 1 
 
-// Only following process names will be allowed to connect to LAN and internet(ipv4 & ipv6), 
-// the process need to have the name exactly equal than the whitelisted.
+// Only following process names will be allowed to connect to LAN and internet
+// (IPv4/6) the process need to have the name exactly equal than the whitelisted
 
 char *whitelist_exact[] = {
 	// BASE TOOLS
@@ -42,8 +40,9 @@ char *whitelist_exact[] = {
 };
 
 
-// Processes whos name contains some of this words will be also allowed to connect to internet and LAN (ipv4 & ipv6)
-// this words are compared with strstr()
+// Processes whos name contains some of this words will be also allowed to
+// connect to internet and LAN (ipv4 & ipv6) this words are compared with
+// strstr()
 
 char *whitelist_similar[] = {
 	// FIREFOX & THUNDERBIRD2
